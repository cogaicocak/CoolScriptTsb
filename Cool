-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Skill Configuration
local SKILLS = {
    [1] = {
        key = "1",
        cooldown = 22, -- 5 seconds cooldown
        lastUsed = 0
    },
    [2] = {
        key = "2",
        cooldown = 20, -- 8 seconds cooldown
        lastUsed = 0
    },
    [3] = {
        key = "3",
        cooldown = 25, -- 12 seconds cooldown
        lastUsed = 0
    },
    [4] = {
        key = "4",
        cooldown = 1, -- 15 seconds cooldown
        lastUsed = 0
    }
}

-- Auto Skill Variables
local isAutoSkillEnabled = false
local skillConnection = nil

-- Create Auto Skill Button
local autoSkillButton = Instance.new("TextButton")
autoSkillButton.Name = "AutoSkillButton"
autoSkillButton.Size = UDim2.new(0.9, 0, 0, 40)
autoSkillButton.Position = UDim2.new(0.05, 0, 0.75, 0) -- Adjust position as needed
autoSkillButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
autoSkillButton.TextColor3 = Color3.fromRGB(255, 255, 255)
autoSkillButton.Text = "AUTO SKILLS OFF"
autoSkillButton.TextSize = 18
autoSkillButton.Font = Enum.Font.GothamBold
autoSkillButton.Parent = mainFrame

-- Add corner to button
local autoSkillCorner = Instance.new("UICorner")
autoSkillCorner.CornerRadius = UDim.new(0, 10)
autoSkillCorner.Parent = autoSkillButton

-- Function to simulate key press
local function simulateKeyPress(key)
    -- Simulate key press
    local virtualInput = game:GetService("VirtualInputManager")
    virtualInput:SendKeyEvent(true, key, false, game)
    wait(0.1) -- Small delay
    virtualInput:SendKeyEvent(false, key, false, game)
end

-- Function to check skill cooldowns and use skills
local function useSkills()
    if not isAutoSkillEnabled or not targetPlayer then return end
    
    local currentTime = tick()
    
    -- Check and use each skill
    for skillNumber, skillData in pairs(SKILLS) do
        if currentTime - skillData.lastUsed >= skillData.cooldown then
            simulateKeyPress(skillData.key)
            skillData.lastUsed = currentTime
            
            -- Create visual feedback
            local notification = Instance.new("TextLabel")
            notification.Text = "Used Skill " .. skillNumber
            notification.Size = UDim2.new(0, 100, 0, 20)
            notification.Position = UDim2.new(0.5, -50, 0.3 + (skillNumber * 0.05), 0)
            notification.BackgroundTransparency = 0.5
            notification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            notification.TextColor3 = Color3.fromRGB(255, 255, 255)
            notification.Parent = gui
            
            -- Fade out and destroy notification
            game:GetService("Debris"):AddItem(notification, 1)
            local tween = game:GetService("TweenService"):Create(
                notification,
                TweenInfo.new(1),
                {TextTransparency = 1, BackgroundTransparency = 1}
            )
            tween:Play()
        end
    end
end

-- Function to toggle auto skill
local function toggleAutoSkill()
    isAutoSkillEnabled = not isAutoSkillEnabled
    
    if isAutoSkillEnabled then
        autoSkillButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        autoSkillButton.Text = "AUTO SKILLS ON"
        
        -- Start the skill loop
        if skillConnection then
            skillConnection:Disconnect()
        end
        
        skillConnection = RunService.Heartbeat:Connect(function()
            useSkills()
        end)
    else
        autoSkillButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        autoSkillButton.Text = "AUTO SKILLS OFF"
        
        if skillConnection then
            skillConnection:Disconnect()
            skillConnection = nil
        end
    end
end

-- Connect auto skill button
autoSkillButton.MouseButton1Click:Connect(toggleAutoSkill)

-- Create cooldown indicators
local cooldownFrame = Instance.new("Frame")
cooldownFrame.Name = "CooldownFrame"
cooldownFrame.Size = UDim2.new(0, 120, 0, 30)
cooldownFrame.Position = UDim2.new(0, 10, 0.5, 0)
cooldownFrame.BackgroundTransparency = 1
cooldownFrame.Parent = gui

-- Create skill indicators
for i = 1, 4 do
    local skillIndicator = Instance.new("Frame")
    skillIndicator.Name = "Skill"..i.."Indicator"
    skillIndicator.Size = UDim2.new(0, 25, 0, 25)
    skillIndicator.Position = UDim2.new(0, (i-1) * 30, 0, 0)
    skillIndicator.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    skillIndicator.Parent = cooldownFrame
    
    local skillLabel = Instance.new("TextLabel")
    skillLabel.Size = UDim2.new(1, 0, 1, 0)
    skillLabel.Text = i
    skillLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    skillLabel.BackgroundTransparency = 1
    skillLabel.Parent = skillIndicator
    
    local skillCorner = Instance.new("UICorner")
    skillCorner.CornerRadius = UDim.new(0, 5)
    skillCorner.Parent = skillIndicator
end

-- Update cooldown indicators
local function updateCooldowns()
    if not isAutoSkillEnabled then return end
    
    local currentTime = tick()
    for i = 1, 4 do
        local indicator = cooldownFrame:FindFirstChild("Skill"..i.."Indicator")
        if indicator then
            local timeLeft = SKILLS[i].cooldown - (currentTime - SKILLS[i].lastUsed)
            if timeLeft > 0 then
                indicator.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            else
                indicator.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            end
        end
    end
end

-- Connect cooldown updates
RunService.RenderStepped:Connect(updateCooldowns)

-- Clean up
script.Destroyed:Connect(function()
    if skillConnection then
        skillConnection:Disconnect()
    end
end)
