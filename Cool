-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Variables
local player = Players.LocalPlayer
local connection = nil
local aimConnection = nil
local targetPlayer = nil
local DISTANCE = 10
local isEnabled = false
local isAimbotEnabled = false

-- Health threshold
local MAX_HEALTH_THRESHOLD = 25

-- Zoom variables
local MIN_ZOOM = 5
local MAX_ZOOM = 50
local currentZoom = 20
local ZOOM_SPEED = 2

-- [Previous GUI creation code remains the same...]

-- Function to get closest valid target
local function findNewTarget()
    local closestDistance = math.huge
    local newTarget = nil
    
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= player then
            local character = plr.Character
            if character then
                local humanoid = character:FindFirstChild("Humanoid")
                if humanoid and humanoid.Health > 0 and humanoid.Health < MAX_HEALTH_THRESHOLD then
                    local targetRoot = character:FindFirstChild("HumanoidRootPart")
                    local playerRoot = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                    
                    if targetRoot and playerRoot then
                        local distance = (targetRoot.Position - playerRoot.Position).Magnitude
                        if distance < closestDistance then
                            closestDistance = distance
                            newTarget = plr
                        end
                    end
                end
            end
        end
    end
    
    return newTarget
end

-- Function to get position behind target
local function getPositionBehindTarget(targetCFrame)
    return targetCFrame * CFrame.new(0, 0, DISTANCE)
end

-- Function to aim at target
local function aimAtTarget()
    if not targetPlayer or not targetPlayer.Character or not player.Character then
        return
    end
    
    local targetHead = targetPlayer.Character:FindFirstChild("Head")
    local playerHead = player.Character:FindFirstChild("Head")
    local playerHumanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
    
    if targetHead and playerHead and playerHumanoidRootPart then
        local camera = workspace.CurrentCamera
        local targetPos = targetHead.Position
        local playerPos = playerHead.Position
        
        local lookVector = (targetPos - playerPos).Unit
        playerHumanoidRootPart.CFrame = CFrame.lookAt(playerHumanoidRootPart.Position, targetPos)
        
        local cameraPos = playerPos - lookVector * currentZoom
        camera.CFrame = CFrame.new(cameraPos, targetPos)
    end
end

-- Modified toggle teleport function
local function toggleTeleport()
    isEnabled = not isEnabled
    
    if isEnabled then
        toggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        toggleButton.Text = "STOP FOLLOW"
        
        connection = RunService.Heartbeat:Connect(function()
            -- Check if current target is valid
            if targetPlayer then
                local character = targetPlayer.Character
                if character then
                    local humanoid = character:FindFirstChild("Humanoid")
                    if not humanoid or humanoid.Health <= 0 or humanoid.Health >= MAX_HEALTH_THRESHOLD then
                        -- Current target is no longer valid, find new target
                        targetPlayer = findNewTarget()
                        -- Update player list selection
                        for _, btn in pairs(playerList:GetChildren()) do
                            if btn:IsA("TextButton") then
                                btn.BackgroundColor3 = (targetPlayer and btn.Text == targetPlayer.Name) 
                                    and Color3.fromRGB(0, 120, 255) 
                                    or Color3.fromRGB(55, 55, 55)
                            end
                        end
                    end
                end
            else
                -- No target, try to find one
                targetPlayer = findNewTarget()
            end
            
            -- If we have a valid target, follow them
            if targetPlayer and targetPlayer.Character and player.Character then
                local targetRoot = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                local playerRoot = player.Character:FindFirstChild("HumanoidRootPart")
                
                if targetRoot and playerRoot then
                    local newPosition = getPositionBehindTarget(targetRoot.CFrame)
                    playerRoot.CFrame = newPosition
                end
            end
        end)
    else
        if connection then
            connection:Disconnect()
            connection = nil
        end
        toggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        toggleButton.Text = "START FOLLOW"
    end
end

-- Toggle aimbot function
local function toggleAimbot()
    isAimbotEnabled = not isAimbotEnabled
    
    if isAimbotEnabled then
        if targetPlayer then
            aimToggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            aimToggleButton.Text = "STOP AUTO AIM"
            
            aimConnection = RunService.RenderStepped:Connect(function()
                aimAtTarget()
            end)
        else
            isAimbotEnabled = false
            aimToggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            aimToggleButton.Text = "SELECT PLAYER"
        end
    else
        if aimConnection then
            aimConnection:Disconnect()
            aimConnection = nil
        end
        aimToggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        aimToggleButton.Text = "START AUTO AIM"
    end
end

-- Modified player list update with optimization
local lastUpdateTime = 0
local UPDATE_INTERVAL = 0.5 -- Update every 0.5 seconds

local function updatePlayerList()
    local currentTime = time()
    if currentTime - lastUpdateTime < UPDATE_INTERVAL then
        return
    end
    lastUpdateTime = currentTime

    for _, child in pairs(playerList:GetChildren()) do
        if child:IsA("TextButton") then
            -- Update health display instead of recreating buttons
            local healthLabel = child:FindFirstChild("HealthLabel")
            if healthLabel then
                local plr = Players:FindFirstChild(child.Text)
                if plr and plr.Character then
                    local humanoid = plr.Character:FindFirstChild("Humanoid")
                    if humanoid then
                        healthLabel.Text = math.floor(humanoid.Health)
                        healthLabel.TextColor3 = humanoid.Health < MAX_HEALTH_THRESHOLD 
                            and Color3.fromRGB(255, 0, 0) 
                            or Color3.fromRGB(255, 255, 255)
                    end
                end
            end
        end
    end
end

-- Function to create initial player list
local function createPlayerList()
    for _, child in pairs(playerList:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    
    local yPosition = 5
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= player then
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(0.9, 0, 0, 30)
            button.Position = UDim2.new(0.05, 0, 0, yPosition)
            button.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
            button.TextColor3 = Color3.fromRGB(255, 255, 255)
            button.Text = plr.Name
            button.TextSize = 14
            button.Font = Enum.Font.Gotham
            button.Parent = playerList
            
            local healthLabel = Instance.new("TextLabel")
            healthLabel.Name = "HealthLabel"
            healthLabel.Size = UDim2.new(0.3, 0, 1, 0)
            healthLabel.Position = UDim2.new(0.7, 0, 0, 0)
            healthLabel.BackgroundTransparency = 1
            healthLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            healthLabel.TextSize = 14
            healthLabel.Font = Enum.Font.Gotham
            healthLabel.Parent = button
            
            local playerButtonCorner = Instance.new("UICorner")
            playerButtonCorner.CornerRadius = UDim.new(0, 5)
            playerButtonCorner.Parent = button
            
            button.MouseButton1Click:Connect(function()
                local character = plr.Character
                if character then
                    local humanoid = character:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 and humanoid.Health < MAX_HEALTH_THRESHOLD then
                        targetPlayer = plr
                        for _, btn in pairs(playerList:GetChildren()) do
                            if btn:IsA("TextButton") then
                                btn.BackgroundColor3 = btn == button 
                                    and Color3.fromRGB(0, 120, 255) 
                                    or Color3.fromRGB(55, 55, 55)
                            end
                        end
                    end
                end
            end)
            
            yPosition = yPosition + 35
        end
    end
    
    playerList.CanvasSize = UDim2.new(0, 0, 0, yPosition)
end

-- Connect buttons and handle dragging
toggleButton.MouseButton1Click:Connect(toggleTeleport)
aimToggleButton.MouseButton1Click:Connect(toggleAimbot)

-- Initialize zoom handling
handleZoom()

-- Setup health monitoring with optimization
RunService.Heartbeat:Connect(updatePlayerList)

-- Monitor when players join/leave
Players.PlayerAdded:Connect(createPlayerList)
Players.PlayerRemoving:Connect(createPlayerList)

-- Initial setup
createPlayerList()

-- Parent GUI to PlayerGui
gui.Parent = player:WaitForChild("PlayerGui")

-- Cleanup on script destroy
script.Destroyed:Connect(function()
    if connection then
        connection:Disconnect()
    end
    if aimConnection then
        aimConnection:Disconnect()
    end
    gui:Destroy()
end)
