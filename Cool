-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Variables
local player = Players.LocalPlayer
local connection = nil
local aimConnection = nil
local targetObject = nil
local DISTANCE = 10
local isEnabled = false
local isAimbotEnabled = false
local LOW_HEALTH_THRESHOLD = 20

-- Zoom variables
local MIN_ZOOM = 5
local MAX_ZOOM = 50
local currentZoom = 20
local ZOOM_SPEED = 2

-- Create ScreenGui
local gui = Instance.new("ScreenGui")
gui.Name = "TeleportAndAimGUI"
gui.ResetOnSpawn = false

-- Create main frame
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 200, 0, 300)
mainFrame.Position = UDim2.new(0.8, 0, 0.5, -150)
mainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = gui

-- Add rounded corners
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 10)
corner.Parent = mainFrame

-- Create title
local title = Instance.new("TextLabel")
title.Name = "Title"
title.Size = UDim2.new(1, 0, 0, 30)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Text = "Low HP Targeter"
title.TextSize = 18
title.Font = Enum.Font.GothamBold
title.Parent = mainFrame

-- Add corner to title
local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 10)
titleCorner.Parent = title

-- Create target list
local targetList = Instance.new("ScrollingFrame")
targetList.Name = "TargetList"
targetList.Size = UDim2.new(0.9, 0, 0.5, 0)
targetList.Position = UDim2.new(0.05, 0, 0.15, 0)
targetList.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
targetList.BorderSizePixel = 0
targetList.ScrollBarThickness = 4
targetList.Parent = mainFrame

-- Add corner to target list
local listCorner = Instance.new("UICorner")
listCorner.CornerRadius = UDim.new(0, 10)
listCorner.Parent = targetList

-- Create toggle buttons
local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleButton"
toggleButton.Size = UDim2.new(0.9, 0, 0, 40)
toggleButton.Position = UDim2.new(0.05, 0, 0.7, 0)
toggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Text = "START FOLLOW"
toggleButton.TextSize = 18
toggleButton.Font = Enum.Font.GothamBold
toggleButton.Parent = mainFrame

local aimToggleButton = Instance.new("TextButton")
aimToggleButton.Name = "AimToggleButton"
aimToggleButton.Size = UDim2.new(0.9, 0, 0, 40)
aimToggleButton.Position = UDim2.new(0.05, 0, 0.85, 0)
aimToggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
aimToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
aimToggleButton.Text = "START AUTO AIM"
aimToggleButton.TextSize = 18
aimToggleButton.Font = Enum.Font.GothamBold
aimToggleButton.Parent = mainFrame

-- Add corners to buttons
local buttonCorner = Instance.new("UICorner")
buttonCorner.CornerRadius = UDim.new(0, 10)
buttonCorner.Parent = toggleButton

local aimButtonCorner = Instance.new("UICorner")
aimButtonCorner.CornerRadius = UDim.new(0, 10)
aimButtonCorner.Parent = aimToggleButton

-- Handle zoom function
local function handleZoom()
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseWheel then
            if input.Position.Z > 0 then
                currentZoom = math.max(MIN_ZOOM, currentZoom - ZOOM_SPEED)
            else
                currentZoom = math.min(MAX_ZOOM, currentZoom + ZOOM_SPEED)
            end
        end
    end)
end

-- Function to find objects with Humanoid and low health
local function findLowHealthTargets()
    local lowHealthTargets = {}
    
    -- Search in workspace for models with Humanoids
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Model") then
            local humanoid = obj:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health < LOW_HEALTH_THRESHOLD and humanoid.Health > 0 then
                table.insert(lowHealthTargets, obj)
            end
        end
    end
    
    return lowHealthTargets
end

-- Function to update target list
local function updateTargetList()
    for _, child in pairs(targetList:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    
    local yPosition = 5
    local targets = findLowHealthTargets()
    
    for _, target in pairs(targets) do
        local humanoid = target:FindFirstChild("Humanoid")
        if humanoid then
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(0.9, 0, 0, 30)
            button.Position = UDim2.new(0.05, 0, 0, yPosition)
            button.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
            button.TextColor3 = Color3.fromRGB(255, 255, 255)
            button.Text = string.format("%s (HP: %.1f)", target.Name, humanoid.Health)
            button.TextSize = 14
            button.Font = Enum.Font.Gotham
            button.Parent = targetList
            
            local targetButtonCorner = Instance.new("UICorner")
            targetButtonCorner.CornerRadius = UDim.new(0, 5)
            targetButtonCorner.Parent = button
            
            button.MouseButton1Click:Connect(function()
                targetObject = target
                for _, btn in pairs(targetList:GetChildren()) do
                    if btn:IsA("TextButton") then
                        btn.BackgroundColor3 = btn == button and Color3.fromRGB(0, 120, 255) or Color3.fromRGB(55, 55, 55)
                    end
                end
            end)
            
            yPosition = yPosition + 35
        end
    end
    
    targetList.CanvasSize = UDim2.new(0, 0, 0, yPosition)
end

-- Function to get position behind target
local function getPositionBehindTarget(targetCFrame)
    return targetCFrame * CFrame.new(0, 0, DISTANCE)
end

-- Function to aim at target
local function aimAtTarget()
    if not targetObject or not player.Character then
        return
    end
    
    local targetHumanoid = targetObject:FindFirstChild("Humanoid")
    local targetHead = targetObject:FindFirstChild("Head")
    local playerHead = player.Character:FindFirstChild("Head")
    local playerHumanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
    
    if targetHead and playerHead and playerHumanoidRootPart and targetHumanoid and targetHumanoid.Health > 0 then
        local camera = workspace.CurrentCamera
        local targetPos = targetHead.Position
        local playerPos = playerHead.Position
        
        -- Calculate direction vector from player to target
        local lookVector = (targetPos - playerPos).Unit
        
        -- Create new CFrame for character, always facing target
        playerHumanoidRootPart.CFrame = CFrame.lookAt(playerHumanoidRootPart.Position, targetPos)
        
        -- Calculate camera position with zoom
        local cameraPos = playerPos - lookVector * currentZoom
        
        -- Set camera
        camera.CFrame = CFrame.new(cameraPos, targetPos)
    else
        -- If target is dead or invalid, clear target
        targetObject = nil
        updateTargetList()
    end
end

-- Toggle teleport function
local function toggleTeleport()
    isEnabled = not isEnabled
    
    if isEnabled then
        if targetObject then
            toggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            toggleButton.Text = "STOP FOLLOW"
            
            connection = RunService.Heartbeat:Connect(function()
                if not targetObject or not player.Character then
                    return
                end
                
                local targetHumanoid = targetObject:FindFirstChild("Humanoid")
                local targetRoot = targetObject:FindFirstChild("HumanoidRootPart")
                local playerRoot = player.Character:FindFirstChild("HumanoidRootPart")
                
                if targetRoot and playerRoot and targetHumanoid and targetHumanoid.Health > 0 then
                    local newPosition = getPositionBehindTarget(targetRoot.CFrame)
                    playerRoot.CFrame = newPosition
                else
                    -- If target is dead or invalid, stop following
                    toggleTeleport()
                    targetObject = nil
                    updateTargetList()
                end
            end)
        else
            isEnabled = false
            toggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            toggleButton.Text = "SELECT TARGET"
        end
    else
        if connection then
            connection:Disconnect()
            connection = nil
        end
        toggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        toggleButton.Text = "START FOLLOW"
    end
end

-- Toggle aimbot function
local function toggleAimbot()
    isAimbotEnabled = not isAimbotEnabled
    
    if isAimbotEnabled then
        if targetObject then
            aimToggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            aimToggleButton.Text = "STOP AUTO AIM"
            
            aimConnection = RunService.RenderStepped:Connect(function()
                aimAtTarget()
            end)
        else
            isAimbotEnabled = false
            aimToggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            aimToggleButton.Text = "SELECT TARGET"
        end
    else
        if aimConnection then
            aimConnection:Disconnect()
            aimConnection = nil
        end
        aimToggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        aimToggleButton.Text = "START AUTO AIM"
    end
end

-- Make GUI draggable
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
        startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

mainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Connect buttons
toggleButton.MouseButton1Click:Connect(toggleTeleport)
aimToggleButton.MouseButton1Click:Connect(toggleAimbot)

-- Initialize zoom handling
handleZoom()

-- Update target list periodically
local updateConnection = RunService.Heartbeat:Connect(function()
    updateTargetList()
    wait(1) -- Update every second
end)

-- Parent GUI to PlayerGui
gui.Parent = player:WaitForChild("PlayerGui")

-- Cleanup on script destroy
script.Destroyed:Connect(function()
    if connection then
        connection:Disconnect()
    end
    if aimConnection then
        aimConnection:Disconnect()
    end
    if updateConnection then
        updateConnection:Disconnect()
    end
    gui:Destroy()
end)
