-- Script Info
local SCRIPT_INFO = {
    author = "AnhBaDepTrai",
    created = "2025-02-23 13:59:10 UTC",
    version = "1.0.0"
}

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Variables
local player = Players.LocalPlayer
local connection = nil
local aimConnection = nil
local targetObject = nil
local DISTANCE = 10
local isEnabled = false
local isAimbotEnabled = false
local LOW_HEALTH_THRESHOLD = 20

-- Zoom variables
local MIN_ZOOM = 5
local MAX_ZOOM = 50
local currentZoom = 20
local ZOOM_SPEED = 2

-- Function tạo đối tượng test
local function createTestTargets()
    for i = 1, 3 do
        local testModel = Instance.new("Model")
        testModel.Name = "TestTarget_" .. i
        
        local humanoid = Instance.new("Humanoid")
        humanoid.Health = math.random(5, 15)
        humanoid.Parent = testModel
        
        local head = Instance.new("Part")
        head.Name = "Head"
        head.Size = Vector3.new(2, 1, 1)
        head.Position = Vector3.new(i * 5, 5, 0)
        head.BrickColor = BrickColor.new("Bright red")
        head.Parent = testModel
        
        local torso = Instance.new("Part")
        torso.Name = "HumanoidRootPart"
        torso.Size = Vector3.new(2, 2, 1)
        torso.Position = Vector3.new(i * 5, 3, 0)
        torso.BrickColor = BrickColor.new("Bright blue")
        torso.Parent = testModel
        
        testModel.PrimaryPart = torso
        testModel.Parent = workspace
        
        -- Auto change HP
        spawn(function()
            while wait(math.random(3, 7)) do
                if humanoid and humanoid.Parent then
                    humanoid.Health = math.random(5, 25)
                    print(string.format("[%s] HP changed to %.1f", testModel.Name, humanoid.Health))
                end
            end
        end)
    end
end

-- Create GUI
local gui = Instance.new("ScreenGui")
gui.Name = "LowHealthTargeterGUI"
gui.ResetOnSpawn = false

-- Main frame
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 200, 0, 300)
mainFrame.Position = UDim2.new(0.8, 0, 0.5, -150)
mainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = gui

-- Add corners
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 10)
corner.Parent = mainFrame

-- Title
local title = Instance.new("TextLabel")
title.Name = "Title"
title.Size = UDim2.new(1, 0, 0, 30)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Text = "Low HP Targeter"
title.TextSize = 18
title.Font = Enum.Font.GothamBold
title.Parent = mainFrame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 10)
titleCorner.Parent = title

-- Target list
local targetList = Instance.new("ScrollingFrame")
targetList.Name = "TargetList"
targetList.Size = UDim2.new(0.9, 0, 0.5, 0)
targetList.Position = UDim2.new(0.05, 0, 0.15, 0)
targetList.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
targetList.BorderSizePixel = 0
targetList.ScrollBarThickness = 4
targetList.Parent = mainFrame

local listCorner = Instance.new("UICorner")
listCorner.CornerRadius = UDim.new(0, 10)
listCorner.Parent = targetList

-- Status label
local statusLabel = Instance.new("TextLabel")
statusLabel.Name = "StatusLabel"
statusLabel.Size = UDim2.new(0.9, 0, 0, 20)
statusLabel.Position = UDim2.new(0.05, 0, 0.65, 0)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
statusLabel.Text = "No target selected"
statusLabel.TextSize = 14
statusLabel.Font = Enum.Font.Gotham
statusLabel.Parent = mainFrame

-- Toggle buttons
local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleButton"
toggleButton.Size = UDim2.new(0.9, 0, 0, 40)
toggleButton.Position = UDim2.new(0.05, 0, 0.7, 0)
toggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Text = "START FOLLOW"
toggleButton.TextSize = 18
toggleButton.Font = Enum.Font.GothamBold
toggleButton.Parent = mainFrame

local aimToggleButton = Instance.new("TextButton")
aimToggleButton.Name = "AimToggleButton"
aimToggleButton.Size = UDim2.new(0.9, 0, 0, 40)
aimToggleButton.Position = UDim2.new(0.05, 0, 0.85, 0)
aimToggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
aimToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
aimToggleButton.Text = "START AUTO AIM"
aimToggleButton.TextSize = 18
aimToggleButton.Font = Enum.Font.GothamBold
aimToggleButton.Parent = mainFrame

-- Add corners to buttons
local buttonCorner = Instance.new("UICorner")
buttonCorner.CornerRadius = UDim.new(0, 10)
buttonCorner.Parent = toggleButton

local aimButtonCorner = Instance.new("UICorner")
aimButtonCorner.CornerRadius = UDim.new(0, 10)
aimButtonCorner.Parent = aimToggleButton

-- Functions
local function findLowHealthTargets()
    local lowHealthTargets = {}
    print("[Search] Looking for targets...")
    
    for _, obj in pairs(workspace:GetDescendants()) do
        local humanoid = obj:FindFirstChild("Humanoid")
        if humanoid then
            print(string.format("[Found] %s with HP: %.1f", obj.Name, humanoid.Health))
            
            if humanoid.Health < LOW_HEALTH_THRESHOLD and humanoid.Health > 0 then
                table.insert(lowHealthTargets, obj)
                print(string.format("[Added] Target: %s (HP: %.1f)", obj.Name, humanoid.Health))
            end
        end
    end
    
    print(string.format("[Summary] Found %d targets below %d HP", #lowHealthTargets, LOW_HEALTH_THRESHOLD))
    return lowHealthTargets
end

local function updateTargetList()
    for _, child in pairs(targetList:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    
    local yPosition = 5
    local targets = findLowHealthTargets()
    statusLabel.Text = string.format("Found %d targets", #targets)
    
    for _, target in pairs(targets) do
        local humanoid = target:FindFirstChild("Humanoid")
        if humanoid then
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(0.9, 0, 0, 30)
            button.Position = UDim2.new(0.05, 0, 0, yPosition)
            button.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
            button.TextColor3 = Color3.fromRGB(255, 255, 255)
            button.Text = string.format("%s (HP: %.1f)", target.Name, humanoid.Health)
            button.TextSize = 14
            button.Font = Enum.Font.Gotham
            button.Parent = targetList
            button.ZIndex = 2
            
            local buttonCorner = Instance.new("UICorner")
            buttonCorner.CornerRadius = UDim.new(0, 5)
            buttonCorner.Parent = button
            
            button.MouseEnter:Connect(function()
                button.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
            end)
            
            button.MouseLeave:Connect(function()
                if targetObject ~= target then
                    button.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
                end
            end)
            
            button.MouseButton1Click:Connect(function()
                targetObject = target
                statusLabel.Text = string.format("Selected: %s (HP: %.1f)", target.Name, humanoid.Health)
                
                for _, btn in pairs(targetList:GetChildren()) do
                    if btn:IsA("TextButton") then
                        btn.BackgroundColor3 = btn == button and Color3.fromRGB(0, 120, 255) or Color3.fromRGB(55, 55, 55)
                    end
                end
            end)
            
            yPosition = yPosition + 35
        end
    end
    
    targetList.CanvasSize = UDim2.new(0, 0, 0, yPosition)
end

local function getPositionBehindTarget(targetCFrame)
    return targetCFrame * CFrame.new(0, 0, DISTANCE)
end

local function aimAtTarget()
    if not targetObject or not player.Character then return end
    
    local targetHumanoid = targetObject:FindFirstChild("Humanoid")
    local targetHead = targetObject:FindFirstChild("Head")
    local playerHead = player.Character:FindFirstChild("Head")
    local playerHumanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
    
    if targetHead and playerHead and playerHumanoidRootPart and 
       targetHumanoid and targetHumanoid.Health > 0 and targetHumanoid.Health < LOW_HEALTH_THRESHOLD then
        local camera = workspace.CurrentCamera
        local targetPos = targetHead.Position
        local playerPos = playerHead.Position
        
        local lookVector = (targetPos - playerPos).Unit
        playerHumanoidRootPart.CFrame = CFrame.lookAt(playerHumanoidRootPart.Position, targetPos)
        
        local cameraPos = playerPos - lookVector * currentZoom
        camera.CFrame = CFrame.new(cameraPos, targetPos)
    else
        targetObject = nil
        statusLabel.Text = "Target lost"
        updateTargetList()
    end
end

local function toggleTeleport()
    isEnabled = not isEnabled
    
    if isEnabled then
        if targetObject then
            toggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            toggleButton.Text = "STOP FOLLOW"
            
            connection = RunService.Heartbeat:Connect(function()
                if not targetObject or not player.Character then return end
                
                local targetHumanoid = targetObject:FindFirstChild("Humanoid")
                local targetRoot = targetObject:FindFirstChild("HumanoidRootPart")
                local playerRoot = player.Character:FindFirstChild("HumanoidRootPart")
                
                if targetRoot and playerRoot and targetHumanoid and 
                   targetHumanoid.Health > 0 and targetHumanoid.Health < LOW_HEALTH_THRESHOLD then
                    local newPosition = getPositionBehindTarget(targetRoot.CFrame)
                    playerRoot.CFrame = newPosition
                else
                    toggleTeleport()
                    targetObject = nil
                    statusLabel.Text = "Target lost"
                    updateTargetList()
                end
            end)
        else
            isEnabled = false
            toggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            toggleButton.Text = "SELECT TARGET"
        end
    else
        if connection then
            connection:Disconnect()
            connection = nil
        end
        toggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        toggleButton.Text = "START FOLLOW"
    end
end

local function toggleAimbot()
    isAimbotEnabled = not isAimbotEnabled
    
    if isAimbotEnabled then
        if targetObject then
            aimToggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            aimToggleButton.Text = "STOP AUTO AIM"
            
            aimConnection = RunService.RenderStepped:Connect(function()
                aimAtTarget()
            end)
        else
            isAimbotEnabled = false
            aimToggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            aimToggleButton.Text = "SELECT TARGET"
        end
    else
        if aimConnection then
            aimConnection:Disconnect()
            aimConnection = nil
        end
        aimToggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        aimToggleButton.Text = "START AUTO AIM"
    end
end

-- Make GUI draggable
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
        startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

mainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or
       input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Handle zoom
local function handleZoom()
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseWheel then
            if input.Position.Z > 0 then
                currentZoom = math.max(MIN_ZOOM, currentZoom - ZOOM_SPEED)
            else
                currentZoom = math.min(MAX_ZOOM, currentZoom + ZOOM_SPEED)
            end
            -- Update zoom info
            infoLabel.Text = string.format("Zoom: %.0f | Threshold: %d HP", currentZoom, LOW_HEALTH_THRESHOLD)
        end
    end)
end

-- Add info label
local infoLabel = Instance.new("TextLabel")
infoLabel.Name = "InfoLabel"
infoLabel.Size = UDim2.new(0.9, 0, 0, 20)
infoLabel.Position = UDim2.new(0.05, 0, 0, 35)
infoLabel.BackgroundTransparency = 1
infoLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
infoLabel.Text = string.format("Zoom: %.0f | Threshold: %d HP", currentZoom, LOW_HEALTH_THRESHOLD)
infoLabel.TextSize = 12
infoLabel.Font = Enum.Font.Gotham
infoLabel.Parent = mainFrame

-- Add close button
local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 20, 0, 20)
closeButton.Position = UDim2.new(1, -25, 0, 5)
closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.Text = "X"
closeButton.TextSize = 14
closeButton.Font = Enum.Font.GothamBold
closeButton.Parent = mainFrame
closeButton.ZIndex = 3

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 5)
closeCorner.Parent = closeButton

-- Add credits
local creditsLabel = Instance.new("TextLabel")
creditsLabel.Name = "CreditsLabel"
creditsLabel.Size = UDim2.new(0.9, 0, 0, 20)
creditsLabel.Position = UDim2.new(0.05, 0, 0.95, 0)
creditsLabel.BackgroundTransparency = 1
creditsLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
creditsLabel.Text = "By " .. SCRIPT_INFO.author
creditsLabel.TextSize = 12
creditsLabel.Font = Enum.Font.Gotham
creditsLabel.Parent = mainFrame

-- Connect buttons
toggleButton.MouseButton1Click:Connect(toggleTeleport)
aimToggleButton.MouseButton1Click:Connect(toggleAimbot)
closeButton.MouseButton1Click:Connect(function()
    if connection then connection:Disconnect() end
    if aimConnection then aimConnection:Disconnect() end
    gui:Destroy()
end)

-- Initialize
handleZoom()

-- Create update connection with optimized timing
local lastUpdate = 0
local UPDATE_INTERVAL = 0.1 -- Update every 0.1 seconds

local updateConnection = RunService.Heartbeat:Connect(function()
    local currentTime = tick()
    if currentTime - lastUpdate >= UPDATE_INTERVAL then
        updateTargetList()
        lastUpdate = currentTime
        
        -- Check if target is still valid
        if targetObject then
            local humanoid = targetObject:FindFirstChild("Humanoid")
            if not humanoid or humanoid.Health >= LOW_HEALTH_THRESHOLD or humanoid.Health <= 0 then
                targetObject = nil
                statusLabel.Text = "Target lost - HP changed"
                
                -- Reset buttons if needed
                if isEnabled then
                    toggleTeleport()
                end
                if isAimbotEnabled then
                    toggleAimbot()
                end
            end
        end
    end
end)

-- Create test targets for debugging
createTestTargets()

-- Parent GUI to PlayerGui
gui.Parent = player:WaitForChild("PlayerGui")

-- Cleanup on script destroy
script.Destroyed:Connect(function()
    print("[Cleanup] Script shutting down...")
    
    if connection then
        connection:Disconnect()
        print("[Cleanup] Follow connection disconnected")
    end
    
    if aimConnection then
        aimConnection:Disconnect()
        print("[Cleanup] Aim connection disconnected")
    end
    
    if updateConnection then
        updateConnection:Disconnect()
        print("[Cleanup] Update connection disconnected")
    end
    
    -- Remove test targets if they exist
    for _, obj in pairs(workspace:GetChildren()) do
        if obj.Name:match("^TestTarget_") then
            obj:Destroy()
            print("[Cleanup] Removed test target: " .. obj.Name)
        end
    end
    
    gui:Destroy()
    print("[Cleanup] GUI removed")
    print(string.format("[Cleanup] Script terminated at %s", os.date("%Y-%m-%d %H:%M:%S")))
end)

-- Print startup information
print(string.format([[
Low HP Targeter Started
----------------------
Author: %s
Version: %s
Created: %s
Started: %s
----------------------
]], SCRIPT_INFO.author, SCRIPT_INFO.version, SCRIPT_INFO.created, os.date("%Y-%m-%d %H:%M:%S")))
